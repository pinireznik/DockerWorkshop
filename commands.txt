# CLEANUP
docker kill `docker ps -a -q`
docker rm `docker ps -a -q`
kill `pidof serf`

# INSTALL Docker
https://docs.docker.com/installation/#installation
use password "tcuser" if asked

# BASICS
docker
    attach    Attach to a running container
    build     Build a container from a Dockerfile
    commit    Create a new image from a container's changes
    cp        Copy files/folders from the containers filesystem to the host path
    diff      Inspect changes on a container's filesystem
    events    Get real time events from the server
    export    Stream the contents of a container as a tar archive
    history   Show the history of an image
    images    List images
    import    Create a new filesystem image from the contents of a tarball
    info      Display system-wide information
    insert    Insert a file in an image
    inspect   Return low-level information on a container
    kill      Kill a running container
    load      Load an image from a tar archive
    login     Register or Login to the docker registry server
    logs      Fetch the logs of a container
    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT
    ps        List containers
    pull      Pull an image or a repository from the docker registry server
    push      Push an image or a repository to the docker registry server
    restart   Restart a running container
    rm        Remove one or more containers
    rmi       Remove one or more images
    run       Run a command in a new container
    save      Save an image to a tar archive
    search    Search for an image in the docker index
    start     Start a stopped container
    stop      Stop a running container
    tag       Tag an image into a repository
    top       Lookup the running processes of a container
    version   Show the docker version information
    wait      Block until a container stops, then print its exit code

docker run ubuntu ls
docker run -i -t --name file -v `pwd`:/tmp/on_host -w `pwd` ubuntu bash
    touch /tmp/file_a.txt
    touch /tmp/on_host/file_b.txt
    exit
docker diff file

docker run -d -name while ubuntu /bin/sh -c "while true; do echo hi; sleep 1; done"
docker attach while

docker ps
docker ps -a

docker stop while
docker start while
docker top while

docker logs 
docker inspect

docker kill
docker rm

# create a Docker file
vi Dockerfile
	FROM ubuntu
	MAINTAINER UglyDuckling "info@uglyduckling.nl"

	RUN echo deb http://archive.ubuntu.com/ubuntu precise universe >> /etc/apt/sources.list
	RUN apt-get update
	RUN apt-get install -q -y vim
	ENV ENV_VAR some_stuff
	ADD file.txt /file.txt

	EXPOSE 8080
	CMD ["bash", "-c", "ls", "/"]
docker build -t you_name/sample .
docker run you_name/sample
docker run -i -t you_name/sample bash
	ls /file.txt
	exit
docker 

# WORDPRESS + MYSQL EXERSICE

# The workshop is based on:
# from http://www.centurylinklabs.com/decentralizing-docker-how-to-use-serf-with-docker/

# start container with serf.
SERF_ID=$(docker run -d --name serf_1 -p 7946 -p 7373 ud/serf /run.sh)

# download and install serf
wget dl.bintray.com/mitchellh/serf/0.5.0_linux_amd64.zip
unzip 0.5.0_linux_amd64.zip 
sudo mv serf /usr/bin/


# start local serf agent (you need to have serf 0.5 agent in the path)
serf agent &

# connect locat serf to the serf inside container
serf join $(docker port $SERF_ID 7946)

# start mysql with serf  container
MYSQL_ID=$(docker run -d --name mysql --link serf_1:serf_1 -p 3306 ud/mysql-serf /run.sh)


# find the random password to access mysql
docker logs $MYSQL_ID

# set the DB password (found with the previous command)
DB_PASSWORD=v6Dax72kQzQR



# if running in boot2docker which doesn have mysql then we need to create a db inside container
docker run -t -i --name mysql_client --link mysql:mysql -p 3306 ud/mysql-serf bash
mysql -uadmin -p$DB_PASSWORD -h $MYSQL_PORT_3306_TCP_ADDR -P 3306 -e "create database wordpress;"



# create an empty DB in mysql
mysql -uadmin -p${DB_PASSWORD} -h 0.0.0.0 -P $(docker port $MYSQL_ID 3306 | cut -d":" -f2) -e "create database wordpress;"

# start wordpress container that should connect to the mysql container. (the trick is in the file docker-wordpress-serf/start-apache2.sh that # uses serf members for discovery of the mysql IP)
WORDPRESS_ID=$(docker run -d --name wordpress --link serf_1:serf_1 -e="DB_PASSWORD=$DB_PASSWORD" -p 80 ud/wordpress-serf /run.sh)

# check that it works. you should get a proper configuration file
curl --location http://$(docker port $WORDPRESS_ID 80)/

# another test
curl --location http://$(docker port $WORDPRESS_ID 80)/readme.html

# start another WP container.
docker run -d --name wordpress2 --link serf_1:serf_1 -e="DB_PASSWORD=$DB_PASSWORD" -p 80 ud/wordpress-serf /run.sh

